name: "Terraform Deployment"

on:
  push:
    branches: [ "main" ]
    paths:
      - 'dev/**'
      - 'staging/**'
      - 'prod/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'dev/**'
      - 'staging/**'
      - 'prod/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read
  pull-requests: write

env:
  TF_LOG: INFO
  AWS_REGION: us-east-1
  TF_IN_AUTOMATION: true
  TERRAFORM_VERSION: "1.5.0"

jobs:
  validate:
    name: "Validate"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    defaults:
      run:
        working-directory: ./${{ matrix.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

  deploy:
    name: "${{ matrix.environment }} Deployment"
    needs: validate
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == matrix.environment)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        environment: [dev, staging, prod]
    environment: ${{ matrix.environment }}
    concurrency: ${{ matrix.environment }}
    defaults:
      run:
        working-directory: ./${{ matrix.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        id: init
        run: |
          terraform init -input=false
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -detailed-exitcode -out=tfplan 2>&1 | tee plan.txt
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('plan.txt', 'utf8');
            const output = `#### Terraform Plan for ${process.env.ENVIRONMENT} ðŸ“–
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${plan}
            \`\`\`
            
            </details>`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: |
          github.ref == 'refs/heads/main' && 
          (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
          steps.plan.outcome == 'success'
        run: |
          terraform apply -auto-approve -input=false tfplan

      - name: Cleanup Terraform Files
        if: always()
        run: |
          rm -rf .terraform*
          rm -f tfplan plan.txt
